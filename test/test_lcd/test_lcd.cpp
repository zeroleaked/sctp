#include <unity.h>
#include "sctp_lcd.h"
#include "math.h"
#include <esp_log.h>
#include <freertos/FreeRTOS.h>

static const char TAG[] = "test_lcd";

#define TFT_TOSCA 0x5D35
#define TFT_MUSTARD 0xD461

static LGFX display;
static LGFX_Sprite sprite(&display);

TaskHandle_t taskHandle;
void *taskParam;

void test_dimension()
{
    ESP_LOGI(TAG, "HELLO WORLD :)");

    sctp_lcd_start();
    vTaskDelay(3000 / portTICK_PERIOD_MS);
    sctp_lcd_clear();
}

void task1(void *pvParameters)
{
    ESP_LOGI(TAG, "HELLO WORLD :)");
    uint16_t length=300;
    float wl[] = {700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401};
    float a[] = {0.0303412, 0.030843, 0.0313558, 0.0318627, 0.0323821, 0.0329032, 0.0334333, 0.0339679, 0.0345217, 0.0350801, 0.0356514, 0.0362328, 0.0368276, 0.0374313, 0.0380449, 0.038688, 0.0393568, 0.0400561, 0.0407999, 0.0415875, 0.0424198, 0.0432986, 0.0442335, 0.0452012, 0.0462097, 0.0472617, 0.0483437, 0.049481, 0.0506585, 0.0518834, 0.0531592, 0.0544726, 0.0558405, 0.0572523, 0.0587113, 0.0602276, 0.0617904, 0.0634317, 0.065142, 0.0669039, 0.0687339, 0.0706632, 0.0726588, 0.0747487, 0.0769374, 0.0791869, 0.0815383, 0.0839788, 0.0864969, 0.089113, 0.091819, 0.0945977, 0.0974763, 0.100438, 0.103495, 0.106693, 0.109961, 0.113398, 0.11696, 0.120642, 0.124486, 0.128496, 0.13267, 0.137001, 0.141507, 0.146248, 0.151187, 0.156269, 0.161526, 0.166971, 0.172566, 0.178314, 0.184228, 0.190473, 0.196856, 0.203402, 0.210116, 0.217041, 0.224052, 0.231243, 0.238641, 0.246162, 0.253864, 0.261773, 0.269867, 0.27823, 0.286792, 0.295569, 0.304629, 0.313914, 0.323224, 0.332795, 0.34265, 0.352749, 0.363099, 0.37374, 0.384671, 0.395852, 0.407248, 0.418928, 0.430806, 0.4428, 0.454959, 0.467317, 0.479759, 0.492304, 0.504912, 0.517594, 0.530305, 0.542932, 0.555561, 0.56819, 0.580686, 0.593041, 0.605419, 0.617757, 0.63001, 0.64226, 0.654526, 0.666873, 0.679197, 0.691629, 0.704068, 0.716587, 0.729145, 0.741876, 0.754733, 0.767688, 0.780644, 0.793621, 0.806629, 0.819547, 0.832335, 0.84501, 0.857397, 0.869128, 0.880287, 0.891038, 0.901038, 0.910079, 0.918112, 0.925384, 0.931775, 0.937276, 0.942159, 0.946234, 0.949826, 0.952939, 0.955541, 0.958063, 0.96021, 0.962163, 0.964276, 0.966459, 0.968556, 0.970924, 0.973832, 0.977149, 0.980835, 0.984788, 0.989003, 0.992906, 0.996832, 1.0004, 1.00335, 1.00549, 1.00663, 1.00681, 1.00597, 1.00442, 1.0017, 0.998024, 0.993327, 0.987461, 0.980588, 0.972699, 0.963744, 0.953821, 0.943081, 0.930201, 0.915901, 0.900438, 0.883441, 0.865078, 0.845599, 0.824474, 0.802061, 0.77864, 0.753925, 0.728478, 0.702345, 0.675799, 0.649043, 0.622161, 0.595505, 0.569126, 0.544473, 0.521056, 0.499072, 0.479023, 0.460838, 0.444306, 0.430008, 0.417557, 0.407029, 0.398175, 0.390654, 0.384193, 0.378341, 0.37279, 0.367236, 0.361218, 0.354985, 0.348241, 0.340961, 0.333137, 0.324827, 0.316007, 0.30721, 0.298272, 0.289169, 0.279962, 0.271328, 0.2631, 0.255557, 0.24915, 0.243909, 0.239926, 0.237658, 0.23712, 0.238123, 0.240611, 0.244335, 0.249105, 0.254777, 0.261054, 0.267758, 0.274745, 0.281949, 0.289231, 0.296197, 0.303114, 0.309564, 0.315495, 0.320976, 0.325789, 0.329517, 0.332338, 0.334156, 0.334869, 0.334777, 0.333796, 0.331916, 0.329425, 0.326407, 0.32288, 0.318897, 0.314968, 0.310956, 0.306992, 0.30348, 0.300489, 0.297779, 0.295494, 0.294016, 0.29381, 0.294957, 0.297179, 0.300585, 0.305149, 0.310665, 0.317238, 0.324623, 0.33248, 0.340464, 0.348413, 0.356287, 0.363653, 0.370426, 0.376637, 0.382507, 0.387476, 0.391249, 0.393947, 0.395709, 0.396646, 0.396488, 0.395686, 0.393904, 0.391392, 0.388351, 0.385045, 0.381488, 0.377884, 0.374459, 0.371132, 0.368096, 0.365179, 0.362551, 0.360404};
    // for(int i=0; i<length; i++) {
    //     wl[i] = 351+i;
    //     a[i] = 0.0015 * (i+1);
    // }

    sctp_lcd_start();
    vTaskDelay(3000 / portTICK_PERIOD_MS);
    sctp_lcd_clear();
    // sctp_lcd_spec_blank_waiting(0, 500);
    // vTaskDelay(3000 / portTICK_PERIOD_MS);
    // sctp_lcd_spec_blank_sampling(0);
    // vTaskDelay(3000 / portTICK_PERIOD_MS);
    // sctp_lcd_clear();
    // sctp_lcd_spec_sample_waiting(0, 100);
    // vTaskDelay(3000 / portTICK_PERIOD_MS);
    // sctp_lcd_spec_blank_sampling(0);
    // vTaskDelay(3000 / portTICK_PERIOD_MS);
    // sctp_lcd_clear();
    // sctp_lcd_spec_result(0, wl, a, length);
    // vTaskDelay(3000 / portTICK_PERIOD_MS);
    // sctp_lcd_clear();
    sctp_lcd_spec_result_full(wl, a, length);
    vTaskDelete(NULL);
}

void test1() {
    xTaskCreatePinnedToCore(task1, "task1", 8192, NULL, 1, NULL, 1);
    vTaskDelay(10000 / portTICK_PERIOD_MS);
}

extern "C"
{
    void app_main(void);
}

void app_main()
{
    UNITY_BEGIN();
    RUN_TEST(test1);
    UNITY_END();
}